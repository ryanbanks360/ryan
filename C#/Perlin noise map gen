using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MapGenerter : MonoBehaviour
{
    Dictionary<int, GameObject> tileset;
    Dictionary<int, GameObject> tile_groups;
    public GameObject Pre_DeepWater;
    public GameObject Pre_forrest;
    public GameObject Pre_mountains;
    public GameObject Pre_mountaintop;
    public GameObject Pre_Plains;
    public GameObject Pre_Shallowwater;
    public GameObject Pre_Sand;
    public GameObject Pre_AirCarrier;
    public GameObject Pre_Plains_Airport;

    public int map_width = 100;
    public int map_height = 75;

    List<List<int>> noise_grid = new List<List<int>>();
    List<List<GameObject>> tile_grid = new List<List<GameObject>>();

    // recommend 4 to 20
    public float magnification = 7.0f;



    public int x_offset = 0; // <- +>
    public int y_offset = 0; // v- +^

    void Start()
    {
        CreateTileset();
        CreateTileGroups();
        GenerateMap();
    }

    void CreateTileset()
    {
        /** Collect and assign ID codes to the tile prefabs, for ease of access.
            Best ordered to match land elevation. **/

        tileset = new Dictionary<int, GameObject>();
        tileset.Add(0, Pre_DeepWater);
        tileset.Add(1, Pre_AirCarrier);
        tileset.Add(2, Pre_Shallowwater);
        tileset.Add(3, Pre_Sand);
        tileset.Add(4, Pre_Plains);
        tileset.Add(5, Pre_Plains);
        tileset.Add(6, Pre_Plains_Airport);
        tileset.Add(7, Pre_forrest);
        tileset.Add(8, Pre_mountains);
        tileset.Add(9, Pre_mountaintop);
    }


    void CreateTileGroups()
    {
        /** Create empty gameobjects for grouping tiles of the same type, ie
            forest tiles **/

        tile_groups = new Dictionary<int, GameObject>();
        foreach (KeyValuePair<int, GameObject> prefab_pair in tileset)
        {
            GameObject tile_group = new GameObject(prefab_pair.Value.name);
            tile_group.transform.parent = gameObject.transform;
            tile_group.transform.localPosition = new Vector3(0, 0, 0);
            tile_groups.Add(prefab_pair.Key, tile_group);
        }
    }

    void GenerateMap()
    {
        /** Generate a 2D grid using the Perlin noise fuction, storing it as
            both raw ID values and tile gameobjects **/

        for (int x = 0; x < map_width; x++)
        {
            noise_grid.Add(new List<int>());
            tile_grid.Add(new List<GameObject>());

            for (int y = 0; y < map_height; y++)
            {
                int tile_id = GetIdUsingPerlin(x, y);
                noise_grid[x].Add(tile_id);
                CreateTile(tile_id, x, y);
            }
        }
    }

    int GetIdUsingPerlin(int x, int y)
    {
        /** Using a grid coordinate input, generate a Perlin noise value to be
            converted into a tile ID code. Rescale the normalised Perlin value
            to the number of tiles available. **/

        float raw_perlin = Mathf.PerlinNoise(
            (x - x_offset) / magnification,
            (y - y_offset) / magnification
        );
        float clamp_perlin = Mathf.Clamp01(raw_perlin); 
        float scaled_perlin = clamp_perlin * tileset.Count;

        // Replaced 4 with tileset.Count to make adding tiles easier
        if (scaled_perlin == tileset.Count)
        {
            scaled_perlin = (tileset.Count - 1);
        }
        return Mathf.FloorToInt(scaled_perlin);
    }

    void CreateTile(int tile_id, int x, int y)
    {
        /** Creates a new tile using the type id code, group it with common
            tiles, set it's position and store the gameobject. **/
        if (tile_id == 0 || tile_id == 1)
        {
            int WaterSpawm = Random.Range(1, 70);
            if (WaterSpawm >= 69)
            {
                GameObject tile_prefab = tileset[1];
                GameObject tile_group = tile_groups[tile_id];
                GameObject tile = Instantiate(tile_prefab, tile_group.transform);

                tile.name = string.Format("tile_x{0}_y{1}", x, y);
                tile.transform.localPosition = new Vector3(x, y, 0);

                tile_grid[x].Add(tile);

            }
            else
            {
                GameObject tile_prefab = tileset[0];
                GameObject tile_group = tile_groups[tile_id];
                GameObject tile = Instantiate(tile_prefab, tile_group.transform);

                tile.name = string.Format("tile_x{0}_y{1}", x, y);
                tile.transform.localPosition = new Vector3(x, y, 0);

                tile_grid[x].Add(tile);
            }
        } else if (tile_id == 4 || tile_id == 5 || tile_id == 6)
        {
            int WaterSpawm = Random.Range(1, 350);
            if (WaterSpawm >= 348)
            {
                GameObject tile_prefab = tileset[6];
                GameObject tile_group = tile_groups[tile_id];
                GameObject tile = Instantiate(tile_prefab, tile_group.transform);

                tile.name = string.Format("tile_x{0}_y{1}", x, y);
                tile.transform.localPosition = new Vector3(x, y, 0);

                tile_grid[x].Add(tile);

            }
            else
            {
                GameObject tile_prefab = tileset[4];
                GameObject tile_group = tile_groups[tile_id];
                GameObject tile = Instantiate(tile_prefab, tile_group.transform);

                tile.name = string.Format("tile_x{0}_y{1}", x, y);
                tile.transform.localPosition = new Vector3(x, y, 0);

                tile_grid[x].Add(tile);
            }
        }
        else
        {
            GameObject tile_prefab = tileset[tile_id];
            GameObject tile_group = tile_groups[tile_id];
            GameObject tile = Instantiate(tile_prefab, tile_group.transform);

            tile.name = string.Format("tile_x{0}_y{1}", x, y);
            tile.transform.localPosition = new Vector3(x, y, 0);

            tile_grid[x].Add(tile);
        }


    }
}
